from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from agent import ask_gpt
from config import TELEGRAM_TOKEN

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å–∫–∏ –Ω–∞ —Ü–µ—Ä–∫–æ–≤–Ω—É —Å–ª—É–∂–±—É. –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ—Ö–∞–Ω–Ω—è –∞–±–æ —ñ–º–µ–Ω–∞.")

def analyze_message(text):
    if ("–∑–∞ –∑–¥–æ—Ä–æ–≤" in text or "–∑–¥–æ—Ä–æ–≤" in text):
        return "–ó–¥–æ—Ä–æ–≤‚Äô—è"
    if "—É–ø–æ–∫" in text:
        return "–£–ø–æ–∫—ñ–π"
    return None

def extract_names(text):
    names_part = text.split("‚Äî")[-1]
    names = [name.strip() for name in names_part.split(",") if name.strip()]
    return names

async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    parts = text.split(";")
    
    for part in parts:
        type_detected = analyze_message(part)
        names = extract_names(part)
        
        if type_detected and names:
            summary = f"{type_detected}: {', '.join(names)}"
            await send_confirmation(update, context, summary)
        else:
            ai_response = ask_gpt(part)
            await update.message.reply_text(f"AI –¥–æ–ø–æ–º–æ–≥–∞: {ai_response}")

async def send_confirmation(update, context, summary):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é", callback_data='confirm')],
        [InlineKeyboardButton("üìù –ù—ñ, –∑–º—ñ–Ω–∏—Ç–∏", callback_data='edit')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–í–∞—à –∑–∞–ø–∏—Å: {summary}\n–í—Å–µ –≤—ñ—Ä–Ω–æ?", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'confirm':
        await query.edit_message_text(text="‚úÖ –í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —Ç–∞ –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ.")
    elif query.data == 'edit':
        await query.edit_message_text(text="üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –∑–º—ñ–Ω–µ–Ω–∏–π –∑–∞–ø–∏—Å.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()

if __name__ == "__main__":
    main()
